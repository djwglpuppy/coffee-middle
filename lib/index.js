// Generated by CoffeeScript 1.3.1
var changer, coffee, fs, uglify, _;

_ = require("underscore");

fs = require("fs");

coffee = require("coffee-script");

uglify = require("uglify-js");

changer = false;

module.exports = function(config) {
  var coffeefiles, fileListing, io, jsp, pro;
  if (config == null) {
    config = {};
  }
  _.defaults(config, {
    src: "",
    dest: "",
    bare: true,
    helperScope: global,
    jadeFunction: "coffee",
    publicDir: "/js",
    writeFileToPublicDir: true,
    minify: false,
    browserReload: false,
    browserReloadPort: 11911
  });
  if (config.minify) {
    pro = uglify.uglify;
    jsp = uglify.parser;
  }
  if (config.src === "") {
    throw "The src parameter for coffee-middle needs to be filled out";
  }
  if (config.src.substr(-1) !== "/") {
    config.src += "/";
  }
  if (config.dest.substr(-1) !== "/") {
    config.dest += "/";
  }
  if (config.publicDir.substr(-1) !== "/") {
    config.publicDir += "/";
  }
  fileListing = {};
  coffeefiles = fs.readdirSync(config.src);
  _.each(coffeefiles, function(file) {
    var valid;
    valid = file.match(/(.*).coffee$/i);
    if (valid != null) {
      return fileListing[valid[1]] = {
        coffee: config.src + valid[1] + ".coffee",
        js: config.dest + valid[1] + ".js",
        "public": config.publicDir + valid[1] + ".js"
      };
    }
  });
  if (config.browserReload) {
    io = require("socket.io").listen(config.browserReloadPort);
    io.set('log level', 1);
    _.each(coffeefiles, function(file) {
      return fs.watch(config.src + file, function(e) {
        if (changer) {
          return changer = false;
        } else {
          console.log("Reloading Page to Update Coffee File");
          if (e === "change" || e === "rename") {
            return io.sockets.emit("updatecoffee", {
              change: true
            });
          }
        }
      });
    });
  }
  config.helperScope[config.jadeFunction] = function(rendertype) {
    var display;
    if (rendertype == null) {
      rendertype = "both";
    }
    display = "";
    if (rendertype === "files" || rendertype === "both") {
      display += _.map(fileListing, function(file) {
        return "<script src='" + file["public"] + "'></script>";
      }).join("\r");
    }
    if ((rendertype === "reload" || rendertype === "both") && config.browserReload) {
      display += "<script src='http://localhost:" + config.browserReloadPort + "/socket.io/socket.io.js'></script>";
      return display += "<script>\n    var socket = io.connect('http://localhost:" + config.browserReloadPort + "');\n    socket.on('updatecoffee', function (data) {\n        if (data.change === true){\n            console.log(\"Reloading Page to Update Coffee File\");\n            window.location.reload(true);\n        }\n    });\n</script>";
    }
  };
  return function(req, res, next) {
    var ast, cf, coffeecode, content, info, iscoffeefile, jf;
    if (req.method !== "GET") {
      return next();
    }
    iscoffeefile = req.path.match(new RegExp(config.publicDir + "(.*)\.js$"));
    if (iscoffeefile != null) {
      info = fileListing[iscoffeefile[1]];
      if (!(info != null)) {
        return next();
      }
      cf = fs.statSync(info.coffee).mtime;
      try {
        jf = fs.statSync(info.js).mtime;
      } catch (badfileerror) {
        jf = 0;
      }
      if (cf > jf) {
        coffeecode = fs.readFileSync(info.coffee, "ascii");
        changer = true;
        try {
          content = coffee.compile(coffeecode, {
            bare: config.bare
          });
        } catch (error) {
          console.log("CoffeeScript Compile Error:  Please Fix Before Continuing:\r\r");
          console.log(error);
          content = false;
        }
        if (content) {
          res.contentType("application/javascript");
          res.send(content);
          if (config.writeFileToPublicDir) {
            if (config.minify) {
              ast = jsp.parse(content);
              pro.ast_mangle(ast);
              ast = pro.ast_squeeze(ast);
              content = pro.gen_code(ast);
            }
            if (config.writeFileToPublicDir) {
              return fs.writeFileSync(info.js, content);
            }
          }
        } else {
          if (!config.writeFileToPublicDir) {
            res.contentType("application/javascript");
            return res.send();
          } else {
            return next();
          }
        }
      } else {
        return next();
      }
    } else {
      return next();
    }
  };
};
