// Generated by CoffeeScript 1.3.1
var coffee, fs, uglify, _;

_ = require("underscore");

fs = require("fs");

coffee = require("coffee-script");

uglify = require("uglify-js");

module.exports = function(config) {
  var coffeefiles, fileListing, jsp, pro;
  if (config == null) {
    config = {};
  }
  _.defaults(config, {
    src: "",
    dest: "",
    bare: true,
    helperScope: global,
    jadeFunction: "coffee",
    publicDir: "/js/",
    writeFileToPublicDir: true,
    minify: false
  });
  if (config.minify) {
    pro = uglify.uglify;
    jsp = uglify.parser;
  }
  fileListing = {};
  coffeefiles = fs.readdirSync(config.src);
  _.each(coffeefiles, function(file) {
    var valid;
    valid = file.match(/(.*).coffee$/i);
    if (valid != null) {
      return fileListing[valid[1]] = {
        coffee: config.src + valid[1] + ".coffee",
        js: config.dest + valid[1] + ".js",
        "public": config.publicDir + valid[1] + ".js"
      };
    }
  });
  config.helperScope[config.jadeFunction] = function() {
    return _.map(fileListing, function(file) {
      return "<script src='" + file["public"] + "'></script>";
    }).join("\r");
  };
  return function(req, res, next) {
    var ast, cf, coffeecode, content, info, iscoffeefile, jf;
    if (req.method !== "GET") {
      return next();
    }
    iscoffeefile = req.path.match(new RegExp(config.publicDir + "(.*)\.js$"));
    if (iscoffeefile != null) {
      info = fileListing[iscoffeefile[1]];
      if (!(info != null)) {
        return next();
      }
      cf = fs.statSync(info.coffee).mtime;
      try {
        jf = fs.statSync(info.js).mtime;
      } catch (badfileerror) {
        jf = 0;
      }
      if (cf > jf) {
        coffeecode = fs.readFileSync(info.coffee, "ascii");
        content = coffee.compile(coffeecode, {
          bare: config.bare
        });
        res.send(content);
        if (config.writeFileToPublicDir) {
          if (config.minify) {
            ast = jsp.parse(content);
            pro.ast_mangle(ast);
            ast = pro.ast_squeeze(ast);
            content = pro.gen_code(ast);
          }
          if (config.writeFileToPublicDir) {
            return fs.writeFileSync(info.js, content);
          }
        }
      } else {
        return next();
      }
    } else {
      return next();
    }
  };
};
